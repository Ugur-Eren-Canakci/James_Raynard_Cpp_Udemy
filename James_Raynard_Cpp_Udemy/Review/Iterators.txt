Ex:
    const char[] str {'H','e', 'l', 'l', 'o'};

    char* p = str;
    char* pEnd = str+5;

    while (p != pEnd) {
        std::cout << *p;
        ++p;
    }

Final value of p is not the address of any elements of the array. Don't use it or dereference.  
With std::string we can use iterator in a similar way:
    std::string str{"Hello"};
    std::string::iterator it = str.begin();
    while ( it != str.end() ) {
        std::cout << *it;
        it++;
    }

Each iterator that's defined as above is specific to the object they're defined on. Don't use one string's iterator with another.
If the container is empty, begin() and end() return the same value, so the loop is not executed.

Use const_iterator if you want to access the elements without changing them:
    std::string::const_iterator cit;
    for (cit = str.begin(); cit != str.end(); ++cit) {
        std::cout << *cit;
    }

Reverse iterator ...
rbegin() and rend() for iterators to go over all items in a container
iterator's data type will be std::container_name::reverse_iterator

Modern c++ have const versions of iterators
    These make it easier to use auto to iterate over containers
    cbegin(), cend(), crbegin(), crend()
Data types "get a const at the beginning", i.e. cbegin() returns a std::container_name::const_iterator, similar for others


Modern C++ offers non-member begin() and end() global functions
These work even with built-in arrays
for (auto& it = begin(container), it != end(container); ++it) {
    ...
}
C++14 onwards the const and reverse versions of these exist


Range for-loops
Special concise syntax for iterating over containers
for (auto& it : container) {...} is equivalent to
for (auto it = begin(container); it != end(container); ++it) {
    auto& element = *it; // to be able to change elements, the element must be obtained by dereferencing the iterator, and 
    // initializing a reference to the element 
    ...
}
Suggested for most situations, except when you won't visit each element of a container or add/remove elements 


Iterator Arithmetics

Similar to pointers, we can perform arithmetics on iterators
Adding to an iterator moves it towards the back of the container.
    second item iterator == container.begin() + 1
container.end() - container.begin() gives the number of elements in the container

***************IMPORTANT***************
If container size is even, "middle" element is the right one of the middle pair
Otherwise, it's the element in the middle
***************IMPORTANT***************

***************IMPORTANT***************
Access the elements by dereferencing the iterators, not by operator[] or .at()
***************IMPORTANT***************

next() and prev() take in iterators as arguments and output the next or the previous iterator
distance() returns the number of steps needed to go from first arg to second arg.
advance() moves an iterator in the first arg by the second arg 


Half-open range
Right end of the range is open, left end is closed
Ex:
    for (int i=0; i<3; ++i) { ... }
    iteration is done on the set "N intersection [1,3)"

Iterator Ranges
Iterators returned by begin() and end() define an iterator range that's half-open
All iterators from begin() up to end() are contained in this range.
end() iterator is not contained in the range.
