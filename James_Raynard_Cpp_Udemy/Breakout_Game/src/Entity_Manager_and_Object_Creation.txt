create() member function
    Creates a new entity object
    adds id to all_entities
    adds an alias to the object to grouped_entities
    
    the arguments to create() are used to construct the object
    
    different entities require different numbers and types of arguments
    
=> we will use a variadic template
    we will use perfect forwarding for efficiency
    Ex:
    template <typename T, typename... Args>
    T& create(Args&&... args);
    
    The arguments will be forwarded to the entity's constructor
    manager.create<ball>(x,y);
    
    pseudo-code:
        call make_unique() to create the entity object on the heap
            use std::forward() to forward the arguments to the constructor
        insert the unique_ptr into the all_entities vector
        obtain an alias pointer to the entity object
        find the hash code of the entity type
        look up the hash code in the grouped_entities map
        insert the alias pointer into the map's vector
        return the entity object
        
    
entity_manager::grouped_entities
    grouped_entities is an std::map
    
    we use type_info::hash_code() for the key of the map
        this generates a unique number for each derived class
    
    the value of the map is an std::vector<entity*>
        these pointers are aliases to the entities in the game
        non-owning pointers
        must not be used after its entity has been deleted
        
    