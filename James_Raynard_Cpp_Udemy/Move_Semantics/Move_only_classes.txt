To make a move-only class, implement the move operators, and make the copy operators "deleted"
class Test {

public:
    Test(const Test& other) = delete;
    Test& operator=(const Test& other) = delete;
    Test(Test&& other) noexcept;
    Test& operator=(Test&& other) noexcept;
}

C++ has some types which cannot be copied, but can be moved
    iostream, fstream
    classes used in multithreading
    smart pointer classes
    
    These follow the RAII idiom
        Only one object can own a given resource instance at a time
        The object acquires ownership of the resource in the constructor
        The object releases ownership of the resource in the destructor
    
    The ownership of the resource can be transferred from one objec to another using move semantics
    
C++11 lambda expressions are not good at capturing move-only objects
    capture-by-value copies the objects
        => if you try to capture a non-copiable object by value, compiler will return an error
C++14 has "generalized" lambda capture
    A variable in the outer scope of the lambda can be moved into a lambda-local variable
    Ex:
    fstream fs("output.txt");
    [lfs = std::move(fs)] () {...}
        lfs takes ownership of the file handle
        
        
    
    
    