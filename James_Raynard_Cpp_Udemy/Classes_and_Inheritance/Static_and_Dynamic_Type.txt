C++ variables have two different kinds of type
    Static and Dynamic
    
Static type is the type used in the variable declaration

Dynamic type is the type of the variable in memory

For most objects, these two will be the same
    For pointers however, it can be different
    
C++ almost always uses static typing
    type checking and function call resolution is done by the compiler
    less runtime overhead
    better optimization
    
    the dynamic typing is only used for a pointer or a reference to a base class
        The compiler doesn't decide which member function to call
            Instead, the member function is chosen at runtime, using the object in memory

To use the dynamic type of the variables, we have to declare the member functions as "virtual"

A virtual member function will be inherited by all sub-classes
    
A child class which reimplements a virtual function is said to "override" it

virtual declaration of a member function also solves issues that might appear when derived objects are passed as arguments to a function
Ex:
void draw_shape(const Shape& s) {
    s.draw();
}

Assume Shape::draw is a virtual function. Then for any Shape-derived class that's forwarded into draw_shape() will call the Derived::draw()

If functions have different signatures then that's called "overloading", not "overriding"
    Overload is "how a function can be called".
        Refers to different arguments and commands inside the function definition
    Override is "where a function can be called".
        Refers to which object will call which function 
        Depends on the dynamic type
        
    It's easy to "overload" when we're supposed to "override"
    
C++11 introduced the "override" keyword
    We can add this to the definition of a Derived member function 
    The compiler will check whether this member function overrides a virtual member function in the Base class
        The compiler will raise an error if this function doesn't override
        
C++11 also introduced the "final" keyword
    A final class cannot be derived from
    A final member function cannot be overridden in a child class
    
    Libraries often use final
        The library can provide a class hierarchy, or use one internally
        Users of the library cannot extend this class hierarchy
