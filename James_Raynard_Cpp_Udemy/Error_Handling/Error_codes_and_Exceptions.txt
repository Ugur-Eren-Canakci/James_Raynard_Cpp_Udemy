In C, the only way to communicate an error condition is with an error code
    The function returns a coded number that corresponds to the error
    The caller checks the return value
    
    The caller can handle the error itself
    Or return the error code to its own caller
    Or return a different error code
    
Ex:
// in get_data()
    if (!file) return ERR_FILE_NOT_FOUND;
    ...
// in get_data's caller
int retval = get_data();

switch (retval) {
    ...
    case ERR_FILE_NOT_FOUND:
        // handle the error here
}

Error codes make the code more complicated
    Every potential error needs an if statement to run the cleanup code, and a return value to trigger those specific cleanup codes
    The caller has to check the returned value against every error code that the function could return
    
Error codes often cause maintenance problems
    Large switch statements which need to be kept up-to-date and in sync
    Adding new error codes require changes to other parts of the code

Error codes don't work well with callback functions
    If you forward a function pointer/functor object/lambda into another function and get an error, things get complicated
C++ constructors cannot return anything, let alone an error code

C++ provides "exceptions"
    Code which could cause a run-time error is put inside its own scope
    If an error occurs, create an exception object and exit the current scope
    Find a handler for the exception, depending on the exception's type
    The handler processes the exception object
    
    The programmer specifies the type of the exception object and provides a handler for it
    The program specifies when to create the exception object
    The compiler will generate the code to create the exception object and invoke the correct handler for it
    
Advantages of exceptions:
    avoid lots of tedious and error-prone coding
        the compiler and the runtime takes care of the control flow
        The type system prevents us from using the wrong handler
        No switch statement and no error codes to maintain
    If there's no suitable handler, the program terminates immediately
    An exception object can convey more information than a number
    Constructors can throw exceptions
    
    
